// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"platform-go-challenge/domain"
	"sync"
)

type FakeFavouriteRepository struct {
	AddToFavouritesStub        func(string, string) (domain.Favourite, error)
	addToFavouritesMutex       sync.RWMutex
	addToFavouritesArgsForCall []struct {
		arg1 string
		arg2 string
	}
	addToFavouritesReturns struct {
		result1 domain.Favourite
		result2 error
	}
	addToFavouritesReturnsOnCall map[int]struct {
		result1 domain.Favourite
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFavouriteRepository) AddToFavourites(arg1 string, arg2 string) (domain.Favourite, error) {
	fake.addToFavouritesMutex.Lock()
	ret, specificReturn := fake.addToFavouritesReturnsOnCall[len(fake.addToFavouritesArgsForCall)]
	fake.addToFavouritesArgsForCall = append(fake.addToFavouritesArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.AddToFavouritesStub
	fakeReturns := fake.addToFavouritesReturns
	fake.recordInvocation("AddToFavourites", []interface{}{arg1, arg2})
	fake.addToFavouritesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFavouriteRepository) AddToFavouritesCallCount() int {
	fake.addToFavouritesMutex.RLock()
	defer fake.addToFavouritesMutex.RUnlock()
	return len(fake.addToFavouritesArgsForCall)
}

func (fake *FakeFavouriteRepository) AddToFavouritesCalls(stub func(string, string) (domain.Favourite, error)) {
	fake.addToFavouritesMutex.Lock()
	defer fake.addToFavouritesMutex.Unlock()
	fake.AddToFavouritesStub = stub
}

func (fake *FakeFavouriteRepository) AddToFavouritesArgsForCall(i int) (string, string) {
	fake.addToFavouritesMutex.RLock()
	defer fake.addToFavouritesMutex.RUnlock()
	argsForCall := fake.addToFavouritesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeFavouriteRepository) AddToFavouritesReturns(result1 domain.Favourite, result2 error) {
	fake.addToFavouritesMutex.Lock()
	defer fake.addToFavouritesMutex.Unlock()
	fake.AddToFavouritesStub = nil
	fake.addToFavouritesReturns = struct {
		result1 domain.Favourite
		result2 error
	}{result1, result2}
}

func (fake *FakeFavouriteRepository) AddToFavouritesReturnsOnCall(i int, result1 domain.Favourite, result2 error) {
	fake.addToFavouritesMutex.Lock()
	defer fake.addToFavouritesMutex.Unlock()
	fake.AddToFavouritesStub = nil
	if fake.addToFavouritesReturnsOnCall == nil {
		fake.addToFavouritesReturnsOnCall = make(map[int]struct {
			result1 domain.Favourite
			result2 error
		})
	}
	fake.addToFavouritesReturnsOnCall[i] = struct {
		result1 domain.Favourite
		result2 error
	}{result1, result2}
}

func (fake *FakeFavouriteRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addToFavouritesMutex.RLock()
	defer fake.addToFavouritesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFavouriteRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ domain.FavouriteRepository = new(FakeFavouriteRepository)
