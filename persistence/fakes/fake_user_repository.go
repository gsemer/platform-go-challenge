// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"platform-go-challenge/domain"
	"sync"
)

type FakeUserRepository struct {
	CreateUsersStub        func() ([]domain.User, error)
	createUsersMutex       sync.RWMutex
	createUsersArgsForCall []struct {
	}
	createUsersReturns struct {
		result1 []domain.User
		result2 error
	}
	createUsersReturnsOnCall map[int]struct {
		result1 []domain.User
		result2 error
	}
	GetUserStub        func(string) (string, error)
	getUserMutex       sync.RWMutex
	getUserArgsForCall []struct {
		arg1 string
	}
	getUserReturns struct {
		result1 string
		result2 error
	}
	getUserReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUserRepository) CreateUsers() ([]domain.User, error) {
	fake.createUsersMutex.Lock()
	ret, specificReturn := fake.createUsersReturnsOnCall[len(fake.createUsersArgsForCall)]
	fake.createUsersArgsForCall = append(fake.createUsersArgsForCall, struct {
	}{})
	stub := fake.CreateUsersStub
	fakeReturns := fake.createUsersReturns
	fake.recordInvocation("CreateUsers", []interface{}{})
	fake.createUsersMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUserRepository) CreateUsersCallCount() int {
	fake.createUsersMutex.RLock()
	defer fake.createUsersMutex.RUnlock()
	return len(fake.createUsersArgsForCall)
}

func (fake *FakeUserRepository) CreateUsersCalls(stub func() ([]domain.User, error)) {
	fake.createUsersMutex.Lock()
	defer fake.createUsersMutex.Unlock()
	fake.CreateUsersStub = stub
}

func (fake *FakeUserRepository) CreateUsersReturns(result1 []domain.User, result2 error) {
	fake.createUsersMutex.Lock()
	defer fake.createUsersMutex.Unlock()
	fake.CreateUsersStub = nil
	fake.createUsersReturns = struct {
		result1 []domain.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserRepository) CreateUsersReturnsOnCall(i int, result1 []domain.User, result2 error) {
	fake.createUsersMutex.Lock()
	defer fake.createUsersMutex.Unlock()
	fake.CreateUsersStub = nil
	if fake.createUsersReturnsOnCall == nil {
		fake.createUsersReturnsOnCall = make(map[int]struct {
			result1 []domain.User
			result2 error
		})
	}
	fake.createUsersReturnsOnCall[i] = struct {
		result1 []domain.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserRepository) GetUser(arg1 string) (string, error) {
	fake.getUserMutex.Lock()
	ret, specificReturn := fake.getUserReturnsOnCall[len(fake.getUserArgsForCall)]
	fake.getUserArgsForCall = append(fake.getUserArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetUserStub
	fakeReturns := fake.getUserReturns
	fake.recordInvocation("GetUser", []interface{}{arg1})
	fake.getUserMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUserRepository) GetUserCallCount() int {
	fake.getUserMutex.RLock()
	defer fake.getUserMutex.RUnlock()
	return len(fake.getUserArgsForCall)
}

func (fake *FakeUserRepository) GetUserCalls(stub func(string) (string, error)) {
	fake.getUserMutex.Lock()
	defer fake.getUserMutex.Unlock()
	fake.GetUserStub = stub
}

func (fake *FakeUserRepository) GetUserArgsForCall(i int) string {
	fake.getUserMutex.RLock()
	defer fake.getUserMutex.RUnlock()
	argsForCall := fake.getUserArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeUserRepository) GetUserReturns(result1 string, result2 error) {
	fake.getUserMutex.Lock()
	defer fake.getUserMutex.Unlock()
	fake.GetUserStub = nil
	fake.getUserReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeUserRepository) GetUserReturnsOnCall(i int, result1 string, result2 error) {
	fake.getUserMutex.Lock()
	defer fake.getUserMutex.Unlock()
	fake.GetUserStub = nil
	if fake.getUserReturnsOnCall == nil {
		fake.getUserReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getUserReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeUserRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createUsersMutex.RLock()
	defer fake.createUsersMutex.RUnlock()
	fake.getUserMutex.RLock()
	defer fake.getUserMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUserRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ domain.UserRepository = new(FakeUserRepository)
