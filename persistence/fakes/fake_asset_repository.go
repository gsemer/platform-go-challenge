// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"platform-go-challenge/domain"
	"sync"
)

type FakeAssetRepository struct {
	CreateAssetsStub        func() ([]domain.Asset, error)
	createAssetsMutex       sync.RWMutex
	createAssetsArgsForCall []struct {
	}
	createAssetsReturns struct {
		result1 []domain.Asset
		result2 error
	}
	createAssetsReturnsOnCall map[int]struct {
		result1 []domain.Asset
		result2 error
	}
	GetAssetStub        func(string) (string, error)
	getAssetMutex       sync.RWMutex
	getAssetArgsForCall []struct {
		arg1 string
	}
	getAssetReturns struct {
		result1 string
		result2 error
	}
	getAssetReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAssetRepository) CreateAssets() ([]domain.Asset, error) {
	fake.createAssetsMutex.Lock()
	ret, specificReturn := fake.createAssetsReturnsOnCall[len(fake.createAssetsArgsForCall)]
	fake.createAssetsArgsForCall = append(fake.createAssetsArgsForCall, struct {
	}{})
	stub := fake.CreateAssetsStub
	fakeReturns := fake.createAssetsReturns
	fake.recordInvocation("CreateAssets", []interface{}{})
	fake.createAssetsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAssetRepository) CreateAssetsCallCount() int {
	fake.createAssetsMutex.RLock()
	defer fake.createAssetsMutex.RUnlock()
	return len(fake.createAssetsArgsForCall)
}

func (fake *FakeAssetRepository) CreateAssetsCalls(stub func() ([]domain.Asset, error)) {
	fake.createAssetsMutex.Lock()
	defer fake.createAssetsMutex.Unlock()
	fake.CreateAssetsStub = stub
}

func (fake *FakeAssetRepository) CreateAssetsReturns(result1 []domain.Asset, result2 error) {
	fake.createAssetsMutex.Lock()
	defer fake.createAssetsMutex.Unlock()
	fake.CreateAssetsStub = nil
	fake.createAssetsReturns = struct {
		result1 []domain.Asset
		result2 error
	}{result1, result2}
}

func (fake *FakeAssetRepository) CreateAssetsReturnsOnCall(i int, result1 []domain.Asset, result2 error) {
	fake.createAssetsMutex.Lock()
	defer fake.createAssetsMutex.Unlock()
	fake.CreateAssetsStub = nil
	if fake.createAssetsReturnsOnCall == nil {
		fake.createAssetsReturnsOnCall = make(map[int]struct {
			result1 []domain.Asset
			result2 error
		})
	}
	fake.createAssetsReturnsOnCall[i] = struct {
		result1 []domain.Asset
		result2 error
	}{result1, result2}
}

func (fake *FakeAssetRepository) GetAsset(arg1 string) (string, error) {
	fake.getAssetMutex.Lock()
	ret, specificReturn := fake.getAssetReturnsOnCall[len(fake.getAssetArgsForCall)]
	fake.getAssetArgsForCall = append(fake.getAssetArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetAssetStub
	fakeReturns := fake.getAssetReturns
	fake.recordInvocation("GetAsset", []interface{}{arg1})
	fake.getAssetMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAssetRepository) GetAssetCallCount() int {
	fake.getAssetMutex.RLock()
	defer fake.getAssetMutex.RUnlock()
	return len(fake.getAssetArgsForCall)
}

func (fake *FakeAssetRepository) GetAssetCalls(stub func(string) (string, error)) {
	fake.getAssetMutex.Lock()
	defer fake.getAssetMutex.Unlock()
	fake.GetAssetStub = stub
}

func (fake *FakeAssetRepository) GetAssetArgsForCall(i int) string {
	fake.getAssetMutex.RLock()
	defer fake.getAssetMutex.RUnlock()
	argsForCall := fake.getAssetArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAssetRepository) GetAssetReturns(result1 string, result2 error) {
	fake.getAssetMutex.Lock()
	defer fake.getAssetMutex.Unlock()
	fake.GetAssetStub = nil
	fake.getAssetReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeAssetRepository) GetAssetReturnsOnCall(i int, result1 string, result2 error) {
	fake.getAssetMutex.Lock()
	defer fake.getAssetMutex.Unlock()
	fake.GetAssetStub = nil
	if fake.getAssetReturnsOnCall == nil {
		fake.getAssetReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getAssetReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeAssetRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createAssetsMutex.RLock()
	defer fake.createAssetsMutex.RUnlock()
	fake.getAssetMutex.RLock()
	defer fake.getAssetMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAssetRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ domain.AssetRepository = new(FakeAssetRepository)
